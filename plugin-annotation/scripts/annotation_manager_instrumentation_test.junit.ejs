<%
  const type = locals.type;
  const properties = locals.properties;
-%>
// This file is generated.

package org.maplibre.android.plugins.annotation;

import androidx.test.ext.junit.runners.AndroidJUnit4;

import org.maplibre.android.geometry.LatLng;
import org.maplibre.android.plugins.testapp.activity.TestActivity;
import org.maplibre.android.plugins.BaseActivityTest;

import timber.log.Timber;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Objects;

import static org.maplibre.android.annotation.plugins.MapboxMapAction.invoke;
import static org.junit.Assert.*;
import static org.maplibre.android.style.layers.Property.*;

/**
 * Basic smoke tests for <%- camelize(type) %>Manager
 */
@RunWith(AndroidJUnit4.class)
public class <%- camelize(type) %>ManagerTest extends BaseActivityTest {

    private <%- camelize(type) %>Manager <%- type %>Manager;

    @Override
    protected Class getActivityClass() {
        return TestActivity.class;
    }

    private void setup<%- camelize(type) %>Manager() {
        Timber.i("Retrieving layer");
        invoke(maplibreMap, (uiController, maplibreMap) -> {
            <%- type %>Manager = new <%- camelize(type) %>Manager(idlingResource.getMapView(), maplibreMap, Objects.requireNonNull(maplibreMap.getStyle()));
        });
    }
<% for (const property of properties) { -%>
<% if (!supportsPropertyFunction(property) && property.name !== "line-gradient" && property.name !== "symbol-z-order") { -%>

    @Test
    public void test<%- camelize(property.name) %>AsConstant() {
        validateTestSetup();
        setup<%- camelize(type) %>Manager();
        Timber.i("<%- property.name %>");
        invoke(maplibreMap, (uiController, maplibreMap) -> {
            assertNotNull(<%- type %>Manager);

            <%- type %>Manager.set<%- camelize(property.name) %>(<%- defaultValueJava(property) %>);
            assertEquals((<%- propertyType(property) %>) <%- type %>Manager.get<%- camelize(property.name) %>(), (<%- propertyType(property) %>) <%- defaultValueJava(property) %>);
        });
    }
<% } -%>
<% } -%>
}
